bases:
- "{{ requiredEnv "MYDIR" }}/helmfile/envs.yaml"
---
repositories:
- name: banzaicloud  # thanos, src: https://github.com/banzaicloud/banzai-charts
  url: "https://kubernetes-charts.banzaicloud.com"
# - https://github.com/timescale/promscale/tree/master/helm-chart
# - https://github.com/timescale/timescaledb-kubernetes
# - https://github.com/timescale/tobs
- name: timescale
  url: "https://charts.timescale.com"
- name: bitnami  # memcached, https://github.com/bitnami/charts
  url: "https://charts.bitnami.com/bitnami"
- name: cortex  # https://github.com/cortexproject/cortex-helm-chart
  url: "https://cortexproject.github.io/cortex-helm-chart"
- name: grafana  # https://github.com/grafana/helm-charts
  url: "https://grafana.github.io/helm-charts"
- name: opensearch  # https://github.com/opensearch-project/helm-charts
  url: "https://opensearch-project.github.io/helm-charts"
- name: signoz  # https://github.com/SigNoz/charts
  url: "https://charts.signoz.io"
- name: victoriametrics  # https://github.com/VictoriaMetrics/helm-charts
  url: "https://victoriametrics.github.io/helm-charts"
- name: zer0def
  url: "https://zer0def.github.io/charts"

{{- $s3 := dict "endpoint" (printf "%s-s3.%s.svc:%s" .Values.releases.seaweedfs .Values.namespaces.storage (toString .Values.seaweedfs.ports.http.s3)) "accessKey" .Values.seaweedfs.s3.keys.admin.accessKey "secretKey" .Values.seaweedfs.s3.keys.admin.secretKey }}

templates:
  cortex:
    values:
    - &cortexEtcdKvStore
      store: etcd
      etcd:
        endpoints: ["etcd.{{ .Values.namespaces.storage }}.svc:2379"]
        tls_enabled: false
        tls_insecure_skip_verify: false
    - &cortexS3
      endpoint: {{ $s3.endpoint | quote }}
      access_key_id: {{ $s3.accessKey | quote }}
      secret_access_key: {{ $s3.secretKey | quote }}
      insecure: true
      signature_version: v2
    - &cortexBlockKvStore
      kvstore:
        <<: *cortexEtcdKvStore
        prefix: "cortex/collectors/"
  grafana:
    values:
    - &grafanaRedis
      endpoint: "{{ .Values.releases.redis }}.{{ .Values.namespaces.storage }}.svc:{{ .Values.redis.ports.readwrite }}"
      password: {{ .Values.redis.password | quote }}
    - &etcdKvStore
      store: etcd
      etcd:
        endpoints: ["etcd.{{ .Values.namespaces.storage }}.svc:2379"]
    - &grafanaS3
      endpoint: {{ $s3.endpoint | quote }}
      access_key_id: {{ $s3.accessKey | quote }}
      secret_access_key: {{ $s3.secretKey | quote }}
      s3forcepathstyle: true
      insecure: true

releases:
- name: {{ .Values.releases.thanos }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: zer0def/thanos
  installed: {{ and .Values.enables.monitoring (not .Values.enables.cortex) }}
  #needs:
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.seaweedfs }}
  values:
  - fullnameOverride: {{ .Values.releases.thanos | quote }}
    objstoreSecretOverride: {{ .Values.thanosObjstoreConfig.secret | quote }}
    image:
      tag: 'v{{ .Values.versions.images.thanos }}'
    compact:
      retentionResolutionRaw: 3d
      retentionResolution5m: 16d
      retentionResolution1h: 28d
    objstore:
      type: S3
      config:
        bucket: {{ .Values.thanosObjstoreConfig.bucket | quote }}
        endpoint: {{ $s3.endpoint | quote }}
        access_key: {{ $s3.accessKey | quote }}
        secret_key: {{ $s3.secretKey | quote }}
        insecure: true
        signature_version2: true
    query:
      replicaLabels:
      - prometheus_replica  # server-scoped
      #- prometheus  # cluster-scoped
  hooks:
  - events: ["presync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      kubectl apply -f- <<EOF
      ---
      apiVersion: v1
      kind: Secret
      metadata:
        name: {{ .Values.thanosObjstoreConfig.secret }}
        namespace: {{ .Values.namespaces.monitoring }}
      stringData:
        # ref: https://github.com/thanos-io/thanos/blob/master/docs/storage.md
        {{ .Values.thanosObjstoreConfig.filename }}: |
          type: S3
          config:
            bucket: {{ .Values.thanosObjstoreConfig.bucket | quote }}
            endpoint: {{ $s3.endpoint | quote }}
            access_key: {{ $s3.accessKey | quote }}
            secret_key: {{ $s3.secretKey | quote }}
            insecure: true
            signature_version2: true
      ---
      apiVersion: v1
      kind: Secret
      metadata:
        name: {{ .Values.thanosSidecarMTLSSecret }}
        namespace: {{ .Values.namespaces.monitoring }}
      type: kubernetes.io/tls
      data:
        ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTekNDQWpPZ0F3SUJBZ0lVQ01ORUNtOVdrWnNZcWl2YTZYVHZyQ3F5enA4d0RRWUpLb1pJaHZjTkFRRUwKQlFBd0ZqRVVNQklHQTFVRUF3d0xSV0Z6ZVMxU1UwRWdRMEV3SGhjTk1qQXdPVEUwTVRNek9EUTRXaGNOTXpBdwpPVEV5TVRNek9EUTRXakFXTVJRd0VnWURWUVFEREF0RllYTjVMVkpUUVNCRFFUQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFMdGdnRTRxeTZNS2dLaEJrQXN2Nnp0V0JVbUhLUHNYZWlXci9NUkcKUU9vTzZUamVYbWl5alFtYy9hNmJhUjFueWF0RDF6TWFQcDZlbFhUMEw4K0k2UG9BcWJSRzlhMHpnMFY5NGlKbQp3Z1hLZlFETTlxYit6SGwxZ212dEMzK3pkQzFrWUJMZ0NsdWhERkxTT1p3aVhCS2RuUXZGcE9DUVlQcjg2cCtlCisvMzdaWjU1MVQ5Y3RtSmMzbkVrZy8wRUwwbHkxQ0diS2daL2ZhR2JUUXRkYko3QjRlYXpWNDVodWQ0MzVCTEwKWkptb2tMcmpURWJkQ1BvV2ZsbVN0LzIzZ0daS1F6T3dWbFNwY284S0xyTWhTbHRKL1VabTN4dzF1NHBBWHpEcQpjVnJwekR0RnluUjhJQmdWU1RIcnpLNStXK1kwUUpxeVRSbDJsWkpWWGtxVTVEOENBd0VBQWFPQmtEQ0JqVEFkCkJnTlZIUTRFRmdRVXZLdk1JVnBVeXhsZ0ZrS0tpZWo2TWQ3SG1JRXdVUVlEVlIwakJFb3dTSUFVdkt2TUlWcFUKeXhsZ0ZrS0tpZWo2TWQ3SG1JR2hHcVFZTUJZeEZEQVNCZ05WQkFNTUMwVmhjM2t0VWxOQklFTkJnaFFJdzBRSwpiMWFSbXhpcUs5cnBkTytzS3JMT256QU1CZ05WSFJNRUJUQURBUUgvTUFzR0ExVWREd1FFQXdJQkJqQU5CZ2txCmhraUc5dzBCQVFzRkFBT0NBUUVBQk52TkJQTGdQM2xOaWovQXM3eHlXNGplbCs3MjZVNWNhdllEOWIvM2EyU1EKY0c2UThOYU5WeVlOaGZyWDh2UENlTlJsVisyeGRKM2xvbHlGVGpMbGVIVStsR0lvcTh0OHFvRHBYN3BQQ2F4RgpxaFk4WHNZRm9PcVNlZTJEMGVKY0RqZUZuZWtObmpWYkU1NE8yQkhmaDl4c1RBajBGQytYYmR6dFJzS3JzaTBMClM0V2lDeXVhRlFRcXhFa3FsQ3pTeS9vM25jam1PNlRwcFZuTU1FL2pEZ2MyVUV6Y3lZZzRXTk1EZHRPbWNMYkkKeE52bG9YQnRadFhxT0Z2UC9vUGs4aXJ0NkRSUVdLSDB3SnRtcm1RYVpSMTRsVVRnTmQ1WGxIZ1JUY3FzS25wOQpGaG03aUFrTzJ2WENod2NscHFSZExJaWxxcWNxMDJ5bW80S1JqTkNGUmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
        tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURaekNDQWsrZ0F3SUJBZ0lRWlJ2eW85cm45SGhHcmUxUlNFTS9SREFOQmdrcWhraUc5dzBCQVFzRkFEQVcKTVJRd0VnWURWUVFEREF0RllYTjVMVkpUUVNCRFFUQWVGdzB5TURBNU1UUXhNelF5TXpsYUZ3MHlNakV5TVRneApNelF5TXpsYU1CRXhEekFOQmdOVkJBTU1CblJvWVc1dmN6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQCkFEQ0NBUW9DZ2dFQkFMWUtGUGwvdG5GUFNxSzNpSk1abmx5czU5dzRDZ2xJSmhtWDdobnBXdjR3N2pWZFE3WDcKc3BrY0dpejYxTGE0emJQYk05dVpFcE5HejNhZHl1TmZnRk4ycDUrZmRjUTY4QURwc1gxNUlUOVp6blUzbWs4Tgo4Skl0ZWlISi90M0V2QTNEWHFpWE5NVEdOSWdML0NQb1NtNDNOTnlKb0RpOU50dlcvZUlyVDA4U1NYQkM1TDhpClhnVVl4WFZuTHpVbUU0SThPU2ZucjJNeVZ1eUFOWE5nY3dndkxISDF5WlV4UkN5ZWNmQWlMNnFZTmZQUjVTTVQKdm55VmtXalRvcEZyYkFkeWpnWDNlSStZT21IVHc1USs4WGhHZEVjTEUzSTNxbjc4QjlkOGdyb0tvdjZZMWVHRAplSGJnQzZhNzJMaHVVWTBnSDVadDhWOFlXd3RDNnR5U1Q3TUNBd0VBQWFPQnRUQ0JzakFKQmdOVkhSTUVBakFBCk1CMEdBMVVkRGdRV0JCUXlHTUJHM2tMVVJIZ21PTWhKZVBBOUU1VUx1akJSQmdOVkhTTUVTakJJZ0JTOHE4d2gKV2xUTEdXQVdRb3FKNlBveDNzZVlnYUVhcEJnd0ZqRVVNQklHQTFVRUF3d0xSV0Z6ZVMxU1UwRWdRMEdDRkFqRApSQXB2VnBHYkdLb3IydWwwNzZ3cXNzNmZNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01CTUFzR0ExVWREd1FFCkF3SUZvREFSQmdOVkhSRUVDakFJZ2daMGFHRnViM013RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUxpNXVQa0kKUzNHRldSVkF1U25DUnE5T2FYYWh1WTY4RU9xYXlobnc1dG5ZRWdCRHVxcVFhaVVNUU9MSUtXdVJDNzlGYzFyQQp1c3FlU2RrcjVKMkRaL21SeTBtSDRXN1ptd2phcXpyekJoVmF2WFpZVEJZQ2xiUWlXdUhXUGEzWTY4WFYyNVd1ClYzNzVMR2QybmkzaXhXaUlOZ055NG0xTzByN0lMOW9xVnRwQ3REazZYRFRzU3cxTjlicW9jOS9PQ3U3NFJtT08KUWQ0Q3pXbWViYlFheGhqdFJNUkZyd0haV3dmYWRKVEZTSEpDcUNUMHlYdVQ1ZHZqdjI2YzQ3TkJPWWlSL1ZNcQoyRGJNU3FuN2ZHVzQwUjRTeWhNOE8rdk9WQ2lvOUFwNUpVYzhNOWMxbWwyZTlpSnNQR2h0bjh3UW85Tk5GVU5aCkFZVjFvdDZTRFdKU2ZHcz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
        tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2Z0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktnd2dnU2tBZ0VBQW9JQkFRQzJDaFQ1ZjdaeFQwcWkKdDRpVEdaNWNyT2ZjT0FvSlNDWVpsKzRaNlZyK01PNDFYVU8xKzdLWkhCb3MrdFMydU0yejJ6UGJtUktUUnM5MgpuY3JqWDRCVGRxZWZuM1hFT3ZBQTZiRjllU0UvV2M1MU41cFBEZkNTTFhvaHlmN2R4THdOdzE2b2x6VEV4alNJCkMvd2o2RXB1TnpUY2lhQTR2VGJiMXYzaUswOVBFa2x3UXVTL0lsNEZHTVYxWnk4MUpoT0NQRGtuNTY5ak1sYnMKZ0RWellITUlMeXh4OWNtVk1VUXNubkh3SWkrcW1EWHowZVVqRTc1OGxaRm8wNktSYTJ3SGNvNEY5M2lQbURwaAowOE9VUHZGNFJuUkhDeE55TjZwKy9BZlhmSUs2Q3FMK21OWGhnM2gyNEF1bXU5aTRibEdOSUIrV2JmRmZHRnNMClF1cmNrayt6QWdNQkFBRUNnZ0VBUlhkcGM2Qnh6YUdWZUt5UytKZHhJQ3AzUEVsQ1F6SitINHdqdDAyZWhKdkYKZXlYQS9nUXpya3ZVRFZBV3RqZWxmN25wZXlaWnVVdnZSWE9IaGViZXdIcnFFbmEyYVJDWW43Q09JN1NDcEhzdgoxdmxGOEY4QWE3ZmhBRjNsM1ZrQzdqbWN1TGNpMHVoVUNZcVJTRjZQY0ttdWlXNFhieTk5YkwwSkd6S3R6QjBvCmxSMGphNHY2L0xWMVppam5Zc0hnYThQL1V5MzVKN2VuZ0VBc3I3U1huZ1NHYTg4RUY1V1l6K25oY01nYnN3cG8KYmlKQmZmTkdiMnJlSHFUVTBKS2pYak8xcFJsc1ZDNjRmT2VvcVlBdTVEbExUUnZHNmVnRGxkdmFBdFZsRGdwSApTOXFQQVdRV0IyajhQVy9tWmQ5ZEZpWDNPSkNlZEZ4aCtsZDlLQkNSUVFLQmdRRGF4WER4eHZBNGFvbzhoSUkvCkdlc2NQUFcwemVidGpZU1FZVHdUUWxNR3NTd1p1aUxENGNReks1MCtMVk1lZGdINVpFTVUvL0oySitTaUJUbGIKak5sOWMyZE5HTzdrWUdmMkdiS3kvVDYxMHBDWlVaNXJPR3ZNSXBrZGZBT28wRU1NNm9Bb01xRCtxS2NEajYvOAptN1VheVZIZjBTbkNCV1BFV0hIemF0OW8wd0tCZ1FEVkJITy93cTBrRjRtaGNMNGxuWFE4ZTJQOGhpdHJML3hMCnpTUGhLL2p0UXBHUmdHdS94VDJMbnBpTmZ2ZVpISWZKemw4QXh6Q1hsV0d1R0x3WDc5amNKNUdsMDhVRHlPQkYKOXQ4dGxuTWhzYTlaa1VyQkZURXBnY2tRb2xWOFk4aHBkUUZNMW4rTzJLbm1ta3VBTEFUY1Y1NFZYY2RpTkdLdgpONkN2NEZzeG9RS0JnSHAyZDhrQUFjeXk1dnNGZWh0MG1NWFA0Z0w2RjhEMnJUUmRHZEgyR0ovd1lhMXRJclRnCkZvSkdjZGt5YWdydEtDSEEzRVJQR2h6R0xCZitNS05zN3Zwb3RYVFU5alZsT2d6clNic2tSQXhuK0lXNnlLRmcKamdkUmZzQ2dnVFBva1FBVDdQV1RrY2U4QlBIYlp6cFN0MGh0VmFXaVltdTN0S2Rla3pzZG9qMzlBb0dCQUtjRgptS1JReG1VNE4yZm4rSStSeDZQc3M5YzZkQ3pWTVNOV003M0lOcVFCd0JXdjljd2xvVDRxR2o5SHdHZkRJUTB3CnpQalZOZHFFL0ZQL2ZPdmYyYysxRHRSUkdYY0FPQ2xqaWxZNlV3ZW1SSEVjSk5zRC9Nb293emhSc0dtWjYzZ1UKai9KcGRSYlI5MVdpd1hROEQ0dWMvNHlOUFZwWTdNK3A5RW95eGc1QkFvR0JBSUpweWpGOXRsc3JESXJ0WGZIRApESFdsNG03SjNVZ25UL3ovWW4xdnBjY0tlUWlzUnVjRXZldVJOeUo4TCtBaEJIbWcyc1A0SVJ0c1IvR0lKVWVrCjYrQkJSbFh2dFJYWTRhSkE5OGhXMHRhdVV2UEYyNGxycExFdXhxaERiWVR6UnFuQXNtZFM5NnM0dndKakQzSXMKNVVQYWVoS2VJcnVOMFNGaUhOallBQkNPCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K
      EOF

{{- range (list "" "-index" "-metadata") }}
- name: {{ $.Values.releases.cortex }}-memcached-blocks{{ . }}
  namespace: {{ $.Values.namespaces.monitoring }}
  chart: bitnami/memcached
  installed: {{ and $.Values.enables.monitoring $.Values.enables.cortex }}
  #version: {{ $.Values.versions.charts.memcached }}
{{- if ne $.Values.k8sRuntime "k3d" }}
  #needs:
  #- {{ $.Values.namespaces.storage }}/{{ $.Values.releases.openebs }}
{{- end }}
  values:
  - architecture: high-availability
    replicaCount: {{ default 1 (env "MEMCACHED_COUNT") }}
    image:
      tag: {{ $.Values.versions.images.memcached }}
{{- end }}

- name: {{ .Values.releases.cortex }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: "{{ .Values.chartBases.cortex }}"
  installed: {{ and .Values.enables.monitoring .Values.enables.cortex }}
  skipDeps: true
  needs:
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.seaweedfs }}
{{- range (list "" "-index" "-metadata") }}
  - {{ $.Values.namespaces.monitoring }}/{{ $.Values.releases.cortex }}-memcached-blocks{{ . }}
{{- end }}
{{- if .Values.enables.cortex }}
  hooks:
  - events: ["presync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      kubectl get ns {{ .Values.namespaces.monitoring }} || kubectl create ns {{ .Values.namespaces.monitoring }}
      kubectl -n {{ .Values.namespaces.monitoring }} apply -f- <<EOF
      kind: ConfigMap
      apiVersion: v1
      metadata:
        name: {{ .Values.cortex.fallbackConfig.configMap }}
      data:
        {{ .Values.cortex.fallbackConfig.subPath }}: |
          receivers:
          - name: blackhole
          route:
            receiver: blackhole
      EOF
{{- end }}
  values:
  - images:
      tag: v{{ .Values.versions.images.cortex }}
    alertmanager:
      extraVolumes:
      - name: alertmanager-fallback
        configMap:
          name: {{ .Values.cortex.fallbackConfig.configMap }}
          optional: false
      - name: tmp
        emptyDir: {}
      extraVolumeMounts:
      - mountPath: {{ .Values.cortex.fallbackConfig.mountPath }}
        name: alertmanager-fallback
        readOnly: true
      - mountPath: /tmp
        name: tmp
    config:  # ref: https://github.com/cortexproject/cortex/blob/master/docs/configuration/config-file-reference.md
      chunk_store:
        chunk_cache_config:  # store.chunks-cache
          redis:
            <<: *grafanaRedis
            db: 10
        write_dedupe_cache_config:  # store.index-cache-write
          redis:
            <<: *grafanaRedis
            db: 9
      query_range:
        cache_results: true
        results_cache:
          cache:  # frontend.cache
            redis:
              <<: *grafanaRedis
              db: 11
      storage:
        engine: blocks
        index_queries_cache_config:  # store.index-cache-read
          redis:
            <<: *grafanaRedis
            db: 8
      blocks_storage:
        bucket_store:
          bucket_index:
            enabled: true
          sync_dir: /data/tsdb-sync
          chunks_cache:
            backend: memcached
            memcached:
              addresses: "dns+{{ .Values.releases.cortex }}-memcached-blocks.{{ .Values.namespaces.monitoring }}.svc:11211"
              #host: "{{ .Values.releases.cortex }}-memcached-blocks.{{ .Values.namespaces.monitoring }}.svc:11211"
{{/*
            backend: redis
            redis:
              <<: *grafanaRedis
              db: 5
*/}}
          index_cache:
            backend: memcached
            memcached:
              addresses: "dns+{{ .Values.releases.cortex }}-memcached-blocks-index.{{ .Values.namespaces.monitoring }}.svc:11211"
              #host: "{{ .Values.releases.cortex }}-memcached-blocks-index.{{ .Values.namespaces.monitoring }}.svc:11211"
{{/*
            backend: redis
            redis:
              <<: *grafanaRedis
              db: 6
*/}}
          metadata_cache:
            backend: memcached
            memcached:
              addresses: "dns+{{ .Values.releases.cortex }}-memcached-blocks-metadata.{{ .Values.namespaces.monitoring }}.svc:11211"
              #host: "{{ .Values.releases.cortex }}-memcached-blocks-metadata.{{ .Values.namespaces.monitoring }}.svc:11211"
{{/*
            backend: redis
            redis:
              <<: *grafanaRedis
              db: 7
*/}}
        tsdb:
          dir: /data/tsdb
        backend: s3
        s3:
          <<: *cortexS3
          bucket_name: {{ .Values.cortex.buckets.blocks | quote }}
      store_gateway:
        sharding_enabled: true
        sharding_ring:
          <<: *cortexBlockKvStore
      distributor:
        ha_tracker:
          enable_ha_tracker: true
          kvstore:
            <<: *cortexEtcdKvStore
            prefix: "cortex/ha-tracker/"
        ring:
          <<: *cortexBlockKvStore
      ingester:
        lifecycler:
          ring:
            <<: *cortexBlockKvStore
      compactor:
        sharding_ring:
          <<: *cortexBlockKvStore
      ruler:
        enable_api: true
        enable_sharding: true
        enable_alertmanager_v2: true
        ring:
          kvstore:
            <<: *cortexEtcdKvStore
            prefix: "cortex/rulers/"
      alertmanager:
        enable_api: true
        sharding_enabled: true
        fallback_config_file: {{ .Values.cortex.fallbackConfig.mountPath }}/{{ .Values.cortex.fallbackConfig.subPath }}
        sharding_ring:
          kvstore:
            <<: *cortexEtcdKvStore
            prefix: "cortex/alertmanagers/"
{{- range (list "alertmanager" "ruler") }}
      {{ . }}_storage:
        backend: s3
        s3:
          <<: *cortexS3
          bucket_name: {{ $.Values.cortex.buckets.notify | quote }}
{{- end }}
  -
{{- range (list "alertmanager" "nginx" "distributor" "ingester" "ruler" "querier" "query_frontend" "table_manager" "configs" "store_gateway" "compactor") }}
    {{ . }}:
      #replicas: 3
      statefulSet:
        enabled: true
      #serviceMonitor:
      #  enabled: true
{{- end }}

- name: {{ .Values.releases.loki }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: grafana/loki-distributed
  installed: {{ .Values.enables.monitoring }}
  needs:
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.cassandra }}
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.etcd }}
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.redis }}
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.seaweedfs }}
  values:
  - fullnameOverride: loki
{{- range (list "distributor" "ingester" "querier" "queryFrontend" "gateway") }}
    {{ . }}:
      replicas: 1
{{- end }}
    tableManager:
      enabled: true
    compactor:
      enabled: false
    ruler:
      enabled: true
    loki:
      # https://grafana.com/docs/loki/latest/configuration/
      config: |
        auth_enabled: false
        storage_config:
          aws:
            #<<: *grafanaS3
            endpoint: {{ $s3.endpoint | quote }}
            access_key_id: {{ $s3.accessKey | quote }}
            secret_access_key: {{ $s3.secretKey | quote }}
            s3forcepathstyle: true
            insecure: true
            bucketnames: {{ .Values.loki.buckets.chunks | quote }}
          cassandra:
            addresses: {{ .Values.releases.cassandra }}-client.{{ .Values.namespaces.storage }}.svc
            auth: true
            keyspace: loki
            consistency: LOCAL_QUORUM
            replication_factor: 1
          index_queries_cache_config:
            redis:
              #<<: *grafanaRedis
              endpoint: "{{ .Values.releases.redis }}.{{ .Values.namespaces.storage }}.svc:{{ .Values.redis.ports.readwrite }}"
              password: {{ .Values.redis.password | quote }}
              db: 12
        schema_config:
          configs:
          - from: 2020-09-07
            store: cassandra
            object_store: s3
            schema: v11
            index:
              prefix: loki_index_
              period: 24h
            #chunks:
            #  prefix: loki_chunk_
            #  period: 24h
        limits_config:
          enforce_metric_name: false
          ingestion_rate_mb: 128
          reject_old_samples: true
          reject_old_samples_max_age: 168h
          max_cache_freshness_per_query: 10m
          split_queries_by_interval: 15m
        server:
          http_listen_port: {{ .Values.loki.ports.http }}
        distributor:
          ring:
            kvstore:
              #<<: *etcdKvStore
              store: etcd
              etcd:
                endpoints: ["etcd.{{ .Values.namespaces.storage }}.svc:2379"]
              prefix: "loki/collectors/"
        ingester:
          chunk_idle_period: 30m
          chunk_block_size: 262144
          chunk_encoding: snappy
          chunk_retain_period: 1m
          max_transfer_retries: 0
          wal:
            dir: /var/loki/wal
          lifecycler:
            final_sleep: 0s
            ring:
              replication_factor: 1
              kvstore:
                #<<: *etcdKvStore
                store: etcd
                etcd:
                  endpoints: ["etcd.{{ .Values.namespaces.storage }}.svc:2379"]
                prefix: "loki/collectors/"
        ruler:
          enable_api: true
          ring:
            kvstore:
              #<<: *etcdKvStore
              store: etcd
              etcd:
                endpoints: ["etcd.{{ .Values.namespaces.storage }}.svc:2379"]
              prefix: "loki/rulers/"
          storage:
            type: s3
            s3:
              #<<: *grafanaS3
              endpoint: {{ $s3.endpoint | quote }}
              access_key_id: {{ $s3.accessKey | quote }}
              secret_access_key: {{ $s3.secretKey | quote }}
              s3forcepathstyle: true
              insecure: true
              bucketnames: {{ .Values.loki.buckets.notify | quote }}
        chunk_store_config:
          max_look_back_period: 0s
          chunk_cache_config:
            redis:
              #<<: *grafanaRedis
              endpoint: "{{ .Values.releases.redis }}.{{ .Values.namespaces.storage }}.svc:{{ .Values.redis.ports.readwrite }}"
              password: {{ .Values.redis.password | quote }}
              db: 14
          write_dedupe_cache_config:
            redis:
              #<<: *grafanaRedis
              endpoint: "{{ .Values.releases.redis }}.{{ .Values.namespaces.storage }}.svc:{{ .Values.redis.ports.readwrite }}"
              password: {{ .Values.redis.password | quote }}
              db: 15
        table_manager:
          retention_deletes_enabled: false
          retention_period: 0s
        query_range:
          align_queries_with_step: true
          max_retries: 5
          cache_results: true
          results_cache:
            cache:
              redis:
                #<<: *grafanaRedis
                endpoint: "{{ .Values.releases.redis }}.{{ .Values.namespaces.storage }}.svc:{{ .Values.redis.ports.readwrite }}"
                password: {{ .Values.redis.password | quote }}
                db: 13
        frontend_worker:
          frontend_address: "loki-query-frontend:{{ .Values.loki.ports.grpc }}"
        frontend:
          log_queries_longer_than: 5s
          compress_responses: true
          tail_proxy_url: "http://loki-querier:{{ .Values.loki.ports.http }}"

# requires non-free timescale-licensed addon to timescaledb.so
- name: {{ .Values.releases.promscale }}
  namespace: {{ .Values.namespaces.storage }}
  chart: timescale/promscale
{{/*
  #chart: "{{ .Values.chartBases.promscale }}"
*/}}
  installed: {{ and .Values.enables.storage .Values.enables.monitoring }}
  #needs:
  #- {{ .Values.namespaces.storage }}/{{ .Values.releases.patroni }}
  values:
  - connection:
      uri: "postgresql://postgres:tea@{{ .Values.releases.patroni }}.{{ .Values.namespaces.storage }}.svc:5432/timescale?sslmode=prefer"
    image:
      tag: {{ .Values.versions.images.promscale }}
    #connectionSecretName:
    service:
      loadBalancer:
        enabled: false

- name: {{ .Values.releases.kubePromStack }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: prometheus-community/kube-prometheus-stack
  {{/* version: {{ .Values.versions.charts.kubePromStack }} */}}
  installed: {{ .Values.enables.monitoring }}
  needs:
  - {{ .Values.namespaces.monitoring }}/{{ .Values.releases.cortex }}
  - {{ .Values.namespaces.monitoring }}/{{ .Values.releases.thanos }}
  - {{ .Values.namespaces.storage }}/{{ .Values.releases.promscale }}
  values:
  - fullnameOverride: {{ .Values.releases.kubePromStack | quote }}
    kube-state-metrics:
      image:
        tag: v2.6.0
    prometheus:
      prometheusSpec:
        podMetadata:
          labels:
            prometheus: self
        #serviceMonitorNamespaceSelector: {}
        serviceMonitorSelector:
          matchLabels: {}  # match *ALL* ServiceMonitors on an *empty* set of labels
        #podMonitorNamespaceSelector: {}
        podMonitorSelector:
          matchLabels: {}  # match *ALL* PodMonitors on an *empty* set of labels
        logLevel: debug
        retention: 3h
{{- if .Values.enables.promscale }}
        remoteRead:
        - url: "http://promscale-connector.{{ .Values.namespaces.storage }}.svc:9201/read"
          readRecent: true
{{- end }}
{{- if or .Values.enables.cortex .Values.enables.promscale }}
        remoteWrite:
{{- if .Values.enables.promscale }}
        - url: "http://promscale-connector.{{ .Values.namespaces.storage }}.svc:9201/write"
{{- end }}
{{- if .Values.enables.cortex }}
        - url: "http://cortex-distributor.{{ .Values.namespaces.monitoring }}.svc:8080/api/v1/push"
{{- end }}
{{- end }}
{{- if not .Values.enables.cortex }}
        secrets:  # mounted under /etc/prometheus/secrets/<secret_name>/<key>
        - {{ .Values.thanosSidecarMTLSSecret }}
        thanos:  # https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#thanosspec
          image: "quay.io/thanos/thanos:v{{ .Values.versions.images.thanos }}"
          version: v{{ .Values.versions.images.thanos }}
          objectStorageConfig:
            key: {{ .Values.thanosObjstoreConfig.filename }}
            name: {{ .Values.thanosObjstoreConfig.secret }}
        #  grpcServerTlsConfig:
        #    caFile: /etc/prometheus/secrets/{{ .Values.thanosSidecarMTLSSecret }}/ca.crt
        #    certFile: /etc/prometheus/secrets/{{ .Values.thanosSidecarMTLSSecret }}/tls.crt
        #    keyFile: /etc/prometheus/secrets/{{ .Values.thanosSidecarMTLSSecret }}/tls.key
        #containers:  # https://github.com/prometheus-operator/prometheus-operator/issues/3322#issuecomment-655369312
        #- name: thanos-sidecar
        #  volumeMounts:
        #  - mountPath: /etc/prometheus/secrets/{{ .Values.thanosSidecarMTLSSecret }}
        #    readOnly: true
        #    name: secret-{{ .Values.thanosSidecarMTLSSecret }}
{{- end }}
    grafana:
      image:
        repository: docker.io/grafana/grafana
        tag: {{ .Values.versions.images.grafana }}
      sidecar:
        datasources:
          defaultDatasourceEnabled: false
      #plugins:
      #- camptocamp-prometheus-alertmanager-datasource
      grafana.ini:
        panels:
          enable_alpha: true
        feature_toggles:
          enable: ngalert
      additionalDataSources:
      - type: loki
        name: Loki
        access: proxy
        url: "http://loki-query-frontend:{{ .Values.loki.ports.http }}"
      - type: prometheus
        access: proxy
        isDefault: true
{{- if not .Values.enables.cortex }}
        name: Thanos
        url: "http://thanos-query-http.{{ .Values.namespaces.monitoring }}.svc:10902/"
{{- else }}
        name: Cortex
        #url: "http://cortex-query-frontend.{{ .Values.namespaces.monitoring }}.svc:8080/prometheus"
        url: "http://cortex-nginx.{{ .Values.namespaces.monitoring }}.svc/api/prom"
      - type: alertmanager
        access: proxy
        name: Cortex-Alertmanager
        #url: "http://cortex-alertmanager.{{ .Values.namespaces.monitoring }}.svc:8080/api/prom"
        url: "http://cortex-nginx.{{ .Values.namespaces.monitoring }}.svc/api/prom"
{{- end }}

# doc: (use autoscaling/v2beta[12] HorizontalPodAutoscaler)
# - ref: https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config.md
# - tut: https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config-walkthrough.md
- name: {{ .Values.releases.prometheusAdapter }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: prometheus-community/prometheus-adapter
  installed: {{ .Values.enables.monitoring }}
  needs:
  - {{ .Values.namespaces.monitoring }}/{{ .Values.releases.kubePromStack }}
  values:
  - image:
      repository: k8s.gcr.io/prometheus-adapter/prometheus-adapter
      tag: v{{ .Values.versions.images.prometheusAdapter }}
    prometheus:
      url: "http://{{ .Values.releases.kubePromStack }}-prometheus.{{ .Values.namespaces.monitoring }}.svc"
    rules: {}

# default u:p → admin:admin
# default tls on, requires `play.ws.ssl.loose.acceptAnyCertificate = true` in cerebro
- name: {{ .Values.releases.opensearch }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: opensearch/opensearch
  version: {{ .Values.versions.charts.opensearch }}
{{- if ne .Values.k8sRuntime "k3d" }}
  #needs:
  #- {{ $.Values.namespaces.storage }}/{{ $.Values.releases.openebs }}
{{- end }}
  values:
  - majorVersion: 2
    securityConfig:
      enabled: false
    extraInitContainers:
    - name: sysctl
      securityContext:
        runAsUser: 0
        privileged: true
      image: "alpine:edge"
      command: ["sysctl", "-w", "vm.max_map_count=262144"]

## doesn't interface well for some reason?
# default u:p → admin:admin
- name: {{ .Values.releases.opensearchDashboards }}
  namespace: {{ .Values.namespaces.monitoring }}
  chart: opensearch/opensearch-dashboards
  version: {{ .Values.versions.charts.opensearchDashboards }}
{{- if ne .Values.k8sRuntime "k3d" }}
  #needs:
  #- {{ $.Values.namespaces.storage }}/{{ $.Values.releases.openebs }}
{{- end }}
  values:
  - service:
      type: NodePort
    #config:  #https://opensearch.org/docs/latest/dashboards/install/tls/
      opensearch_dashboards.yml: |
        server:
          host: "0.0.0.0"
        opensearch:  # server-side
          hosts:
          - "https://opensearch-cluster-master-headless.{{ .Values.namespaces.monitoring }}.svc:9200"
          username: admin
          password: admin
          requestHeadersWhitelist:
          - authorization
          - securitytenant
          ssl:
            verificationMode: none  # full, certificate or none
            #certificateAuthorities: ["<pemFile>"]
        opensearch_security:
          readonly_mode:
            roles:
            - kibana_read_only
          multitenancy:
            enabled: true
            tenants:
              preferred:
              - Private
              - Global
          cookie:
            secure: false
