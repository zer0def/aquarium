helmTimeout: {{ default 86400 (env "HELM_TIMEOUT") }}

namespaces:
  development: {{ default "development" (env "NAMESPACES_DEVELOPMENT") }}
  monitoring: {{ default "monitoring" (env "NAMESPACES_MONITORING") }}
  network: {{ default "network" (env "NAMESPACES_NETWORK") }}
  storage: {{ default "storage" (env "NAMESPACES_STORAGE") }}

releases:
  anchore: {{ default "anchore" (env "RELEASES_ANCHORE") }}
  cassandra: {{ default "cassandra" (env "RELEASES_CASSANDRA") }}
  certManager: {{ default "cert-manager" (env "RELEASES_CERT_MANAGER") }}
  clickhouse: {{ default "clickhouse" (env "RELEASES_CLICKHOUSE") }}
  cortex: {{ default "cortex" (env "RELEASES_CORTEX") }}
  etcd: {{ default "etcd" (env "RELEASES_ETCD") }}
  externalSecrets: {{ default "external-secrets" (env "RELEASES_EXTERNAL_SECRETS") }}
  gitlab: {{ default "gitlab" (env "RELEASES_GITLAB") }}
  harbor: {{ default "harbor" (env "RELEASES_HARBOR") }}
  ingressController: {{ default "nginx-ingress" (env "RELEASES_INGRESS_CONTROLLER") }}
  istio:
    old: {{ default "istio" (env "RELEASES_ISTIO") }}
    init: {{ default "istio-init" (env "RELEASES_ISTIO_INIT") }}
    base: {{ default "istio-base" (env "RELEASES_ISTIO_BASE") }}
    control: {{ default "istio-control" (env "RELEASES_ISTIO_CONTROL") }}
    gateway:
      egress: {{ default "istio-egress" (env "RELEASES_ISTIO_GATEWAY_EGRESS") }}
      ingress: {{ default "istio-ingress" (env "RELEASES_ISTIO_GATEWAY_INGRESS") }}
    policy: {{ default "istio-policy" (env "RELEASES_ISTIO_POLICY") }}
    telemetry:
      grafana: {{ default "istio-grafana" (env "RELEASES_ISTIO_TELEMETRY_GRAFANA") }}
      kiali: {{ default "istio-kiali" (env "RELEASES_ISTIO_TELEMETRY_KIALI") }}
      prometheusOperator: {{ default "istio-prometheus-operator" (env "RELEASES_ISTIO_TELEMETRY_PROMETHEUS_OPERATOR") }}
      tracing: {{ default "istio-tracing" (env "RELEASES_ISTIO_TELEMETRY_TRACING") }}
  jaegerOperator: {{ default "jaeger-operator" (env "RELEASES_JAEGER_OPERATOR") }}
  kafka: {{ default "kafka" (env "RELEASES_KAFKA") }}
  kubeless: {{ default "kubeless" (env "RELEASES_KUBELESS") }}
  kubePromStack: {{ default "kube-prometheus-stack" (env "RELEASES_KUBE_PROMETHEUS_STACK") }}
  loki: {{ default "loki" (env "RELEASES_LOKI") }}
  openebs: {{ default "openebs" (env "RELEASES_OPENEBS") }}
  opensearch: {{ default "opensearch" (env "RELEASES_OPENSEARCH") }}
  opensearchDashboards: {{ default "opensearch-dashboards" (env "RELEASES_OPENSEARCH_DASHBOARDS") }}
  patroni: {{ default "patroni" (env "RELEASES_PATRONI") }}
  promscale: {{ default "promscale" (env "RELEASES_PROMSCALE") }}
  prometheusAdapter: {{ default "prometheus-adapter" (env "RELEASES_PROMETHEUS_ADAPTER") }}
  redis: {{ default "redis" (env "RELEASES_REDIS") }}
  seaweedfs: {{ default "seaweedfs" (env "RELEASES_SEAWEEDFS") }}
  sentry: {{ default "sentry" (env "RELEASES_SENTRY") }}
  skydive: {{ default "skydive" (env "RELEASES_SKYDIVE") }}
  thanos: {{ default "thanos" (env "RELEASES_THANOS") }}
  vault: {{ default "vault" (env "RELEASES_VAULT") }}
  zulip: {{ default "zulip" (env "RELEASES_ZULIP") }}

versions:
  charts:
    etcd: {{ default "8.3.0" (env "CHART_VERSION_ETCD") }}
    externalSecrets: {{ default "0.7.2" (env "CHART_VERSION_EXTERNAL_SECRETS") }}
    grafana: {{ default "6.40.4" (env "CHART_VERSION_GRAFANA") }}
    harbor: {{ default "1.11.0" (env "CHART_VERSION_HARBOR") }}
    jaegerOperator: {{ default "2.25.0" (env "CHART_VERSION_JAEGER_OPERATOR") }}
    kafka: {{ default "11.8.9" (env "CHART_VERSION_KAFKA") }}
    #kubePromStack: {{ default "9.4.10" (env "CHART_VERSION_KUBE_PROM_STACK") }}
    memcached: {{ default "4.2.27" (env "CHART_VERSION_MEMCACHED") }}
    nginx: {{ default "0.0.0-edge" (env "CHART_VERSION_NGINX") }}
    openebs: {{ default "2.11.0" (env "CHART_VERSION_OPENEBS") }}
    opensearch: {{ default "2.10.0" (env "CHART_VERSION_OPENSEARCH") }}
    opensearchDashboards: {{ default "2.8.0" (env "CHART_VERSION_OPENSEARCH_DASHBOARDS") }}
    openfaas: {{ default "9.0.0" (env "CHART_VERSION_OPENFAAS") }}
    prometheus: {{ default "11.16.9" (env "CHART_VERSION_PROMETHEUS") }}
    sentry: {{ default "17.0.0" (env "CHART_VERSION_SENTRY") }}
    vault: {{ default "0.23.0" (env "CHART_VERSION_VAULT") }}
  images:
    certManager: {{ default "1.11.0" (env "VERSIONS_CERT_MANAGER") }}
    clickhouse: {{ default "20.8.9.6" (env "VERSIONS_CLICKHOUSE") }}
    cortex: {{ default "1.14.1" (env "VERSIONS_CORTEX") }}
    etcd: {{ default "3.5.4-debian-11-r6" (env "VERSIONS_ETCD") }}
    externalSecrets: {{ default "0.7.2" (env "VERSIONS_EXTERNAL_SECRETS") }}
    grafana: {{ default "9.3.6" (env "VERSIONS_GRAFANA") }}
    harbor: {{ default "2.7.0" (env "VERSIONS_HARBOR") }}
    istio: {{ default "1.16.1" (env "VERSIONS_ISTIO") }}
    jaeger: {{ default "1.30.0" (env "VERSIONS_JAEGER") }}
    #jaeger: {{ default "1.41.1" (env "VERSIONS_JAEGER") }}
    kiali: {{ default "1.51" (env "VERSIONS_KIALI") }}
    memcached: {{ default "1.6.9-debian-10-r199" (env "VERSIONS_MEMCACHED") }}
    nginx: {{ default "edge-alpine" (env "VERSIONS_NGINX") }}
    openebs: {{ default "2.11.0" (env "VERSIONS_OPENEBS") }}
    openebsNdm: {{ default "1.3.0" (env "VERSIONS_OPENEBS_NDM") }}
    prometheusAdapter: {{ default "0.10.0" (env "VERSIONS_PROMETHEUS_ADAPTER") }}
    promscale: {{ default "0.17.0" (env "VERSIONS_PROMSCALE") }}
    #redis: {{ default "6.2.7-alpine" (env "VERSIONS_REDIS") }}
    redis: {{ default "7.0.5-alpine" (env "VERSIONS_REDIS") }}
    #redisHaproxy: {{ default "2.4-alpine" (env "VERSIONS_REDIS_HAPROXY") }}
    redisHaproxy: {{ default "2.6-alpine" (env "VERSIONS_REDIS_HAPROXY") }}
    redPanda: {{ default "22.3.12" (env "VERSIONS_REDPANDA") }}
    scyllaAgent: {{ default "2.6.5" (env "VERSIONS_SCYLLA_AGENT") }}
    scyllaManager: {{ default "2.6.5" (env "VERSIONS_SCYLLA_MANAGER") }}
    scyllaManagerController: {{ default "2.6.5" (env "VERSIONS_SCYLLA_MANAGER") }}
    scyllaServer: {{ default "5.1.3" (env "VERSIONS_SCYLLA_SERVER") }}
    seaweedfs: {{ default "v3.41" (env "VERSIONS_SEAWEEDFS") }}
    sentry: {{ default "23.1.1" (env "VERSIONS_SENTRY") }}
    thanos: {{ default "0.30.2" (env "VERSIONS_THANOS") }}
    vault: {{ default "1.12.3" (env "VERSIONS_VAULT") }}
    vaultK8s: {{ default "1.2.0" (env "VERSIONS_VAULT_K8S") }}
    zulip: {{ default "6.1-0" (env "VERSIONS_ZULIP") }}

chartBases:
  cortex: "{{ requiredEnv "MYDIR" }}/charts/cortex"
  istio: "{{ requiredEnv "MYDIR" }}/charts/istio/manifests"
  #promscale: "{{ requiredEnv "MYDIR" }}/charts/promscale/deploy"
  seaweedfs: "{{ requiredEnv "MYDIR" }}/charts/seaweedfs/k8s/helm_charts2"
  sentry: "{{ requiredEnv "MYDIR" }}/charts/sentry"
  #swift: "{{ requiredEnv "MYDIR" }}/charts/sapcc/openstack"
  scylla: "{{ requiredEnv "MYDIR" }}/charts/scylla/helm"
  zulip: "{{ requiredEnv "MYDIR" }}/charts/zulip/kubernetes/chart"

enables:
  anchore: {{ not (empty (env "ENABLE_ANCHORE")) }}
  monitoring: {{ not (empty (env "ENABLE_MONITORING")) }}
  network: {{ not (empty (env "ENABLE_NETWORK")) }}
  serverless: {{ not (empty (env "ENABLE_SERVERLESS")) }}
  storage: {{ not (empty (env "ENABLE_STORAGE")) }}
  openebs: {{ not (empty (env "ENABLE_OPENEBS")) }}

k8sRuntime: {{ default "k3d" (env "K8S_RUNTIME") }}

harbor:
  adminPassword: {{ default "Harbor12345" (env "HARBOR_ADMIN_PASSWORD") }}
  coreHostname: {{ default "core.harbor.domain" (env "HARBOR_CORE_HOSTNAME") }}
  httpNodePort: {{ default "30002" (env "HARBOR_HTTP_NODEPORT") }}
  bucket: harbor
  db:
    core:
      name: {{ default "harbor_core" (env "HARBOR_DB_CORE_NAME") }}
      user: {{ default "harbor_core" (env "HARBOR_DB_CORE_USER") }}
      pass: {{ default "harbor_core" (env "HARBOR_DB_CORE_PASS") }}
    notaryServer:
      name: {{ default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_NAME") }}
      user: {{ default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_USER") }}
      pass: {{ default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_PASS") }}
    notarySigner:
      name: {{ default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_NAME") }}
      user: {{ default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_USER") }}
      pass: {{ default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_PASS") }}

kong:
  db:
    user: {{ default "kong" (env "KONG_DB_USER") }}
    pass: {{ default "kong" (env "KONG_DB_PASS") }}
    name: {{ default "kong" (env "KONG_DB_NAME") }}

anchore:
  db:
    user: {{ default "anchore" (env "ANCHORE_DB_USER") }}
    pass: {{ default "anchore" (env "ANCHORE_DB_PASS") }}
    name: {{ default "anchore" (env "ANCHORE_DB_NAME") }}

etcd:
  replicas: 3

# https://github.com/zalando/spilo
# https://github.com/timescale/timescaledb-docker-ha
patroni:
  replicas: 3
  bouncers: 1
  #etcd: true
  walBucket: patroni
  #image: registry.opensource.zalan.do/acid/spilo-10
  #tag: 1.5-p5
  #image: timescale/timescaledb-ha
  #tag: pg10-latest
  #image: registry.opensource.zalan.do/acid/spilo-11
  #tag: 1.6-p1
  #image: timescale/timescaledb-ha
  #tag: pg11-latest
  #image: registry.opensource.zalan.do/acid/spilo-12
  #tag: 1.6-p5
  #image: timescale/timescaledb-ha
  #tag: pg12-latest
  #image: registry.opensource.zalan.do/acid/spilo-13
  #tag: 2.1-p1
  #image: timescale/timescaledb
  #tag: latest-pg13
  image: docker.io/zer0def/spilo
  #tag: 13-2.1p9-tsl2.9.3-citus
  #tag: 14-2.1p9-tsl2.9.3-citus
  tag: 15-2.1p9-tsl2.9.3-citus

rabbitmq:
  password: {{ default "rabbitmq" (env "RMQ_PASSWORD") }}

redis:
  password: {{ default "redis" (env "REDIS_PASSWORD") }}
  databaseCount: {{ default "32" (env "REDIS_DATABASE_COUNT") }}
  ports:
    readwrite: {{ default "6379" (env "REDIS_PORT") }}
    readonly: {{ default "6380" (env "REDIS_PORT_READONLY") }}
    sentinel: {{ default "26379" (env "REDIS_PORT_SENTINEL") }}
  replicas:
    redis: {{ int (default "3" (env "REDIS_REPLICAS")) }}
    haproxy: {{ int (default "1" (env "REDIS_HAPROXY_REPLICAS")) }}

sentry:
  bucket: sentry
  admin:
    user: "admin@sentry.local"
    password: "sentry"
  db:
    name: "sentry"
    user: "sentry"
    pass: "sentry"

thanosObjstoreConfig:
  bucket: thanos
  secret: {{ default "thanos-objstore-config" (env "THANOS_OBJSTORE_CONFIG_SECRET") }}
  filename: {{ default "object-store.yaml" (env "THANOS_OBJSTORE_CONFIG_FILENAME") }}
thanosSidecarMTLSSecret: {{ default "thanos-sidecar-mtls" (env "THANOS_SIDECAR_MTLS_SECRET") }}

timescale:
  db:
    user: {{ default "timescale" (env "TIMESCALE_DB_USER") }}
    pass: {{ default "timescale" (env "TIMESCALE_DB_PASS") }}
    name: {{ default "timescale" (env "TIMESCALE_DB_NAME") }}

cortex:
  buckets:
    blocks: cortex-blocks
    notify: cortex-notify
  fallbackConfig:
    configMap: cortex-fallback
    mountPath: /fallback
    subPath: fallback.yaml

istio:
  multiCluster: false
  meshID: "aquarium"
  network: {{ default "k3s-default" (env "CLUSTER_NAME") | quote }}
  cluster: {{ default "k3s-default" (env "CLUSTER_NAME") | quote }}
  certs:
    rootCaSecret: istio-root-ca-tls
    clusterSecret: "{{ default "k3s-default" (env "CLUSTER_NAME") }}-istio-ca-tls"
  gateway:
    labels:
      istio: eastwestgateway

kafka:
  replicas: 3
  bucket: kafka

clickhouse:
  image: yandex/clickhouse-server
  replicas: 1
  httpPort: 8123
  tcpPort: 9000
  firstUser:
    username: clickhouse
    password: clickhouse

loki:
  buckets:
    chunks: loki-chunks
    notify: loki-notify
  ports:
    http: 3100
    grpc: 9095

seaweedfs:
  ports:
    http:
      master: {{ default "9333" (env "SEAWEEDFS_PORT_HTTP_MASTER") }}
      volume: {{ default "8080" (env "SEAWEEDFS_PORT_HTTP_VOLUME") }}
      filer: {{ default "8888" (env "SEAWEEDFS_PORT_HTTP_FILER") }}
      s3: {{ default "8333" (env "SEAWEEDFS_PORT_HTTP_S3") }}
    grpc:
      master: {{ default "19333" (env "SEAWEEDFS_PORT_GRPC_MASTER") }}
      volume: {{ default "18080" (env "SEAWEEDFS_PORT_GRPC_VOLUME") }}
      filer: {{ default "18888" (env "SEAWEEDFS_PORT_GRPC_FILER") }}
  filerIndex:
    redis:
      enabled: true
      db: 31
    postgresql:
      enabled: false
      user: {{ default "seaweedfs" (env "SEAWEEDFS_DB_USER") }}
      pass: {{ default "seaweedfs" (env "SEAWEEDFS_DB_PASS") }}
      name: {{ default "seaweedfs" (env "SEAWEEDFS_DB_NAME") }}
  s3:
    keys:
      admin:
        accessKey: {{ default "AKIAIOSFODNN7EXAMPLE" (env "MINIO_ACCESS_KEY") }}
        secretKey: {{ default "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" (env "MINIO_SECRET_KEY") }}

externalSecrets:
  vaultTokenRef:
    namespace: storage
    secretName: vault-root-token
    key: token

gitlab:
  buckets:
    artifacts: gitlab-artifacts
    backups: gitlab-backups
    backupsTmp: gitlab-backups-tmp
    dependencyProxy: gitlab-dependency-proxy
    externalDiffs: gitlab-external-diffs
    lfs: gitlab-lfs
    packages: gitlab-packages
    pages: gitlab-pages
    pseudonymizer: gitlab-pseudonymizer
    registry: gitlab-registry
    terraformState: gitlab-terraform-state
    uploads: gitlab-uploads
  secrets:
    common: gitlab-secrets
    s3: gitlab-s3
  pgsql:
    name: gitlab
    user: gitlab
    pass: gitlab

ejabberd:
  db:
    name: ejabberd
    user: ejabberd
    pass: ejabberd

osp:
  bucket: osp
  db:
    name: osp
    user: osp
    pass: osp

zulip:
  db:
    name: zulip
    user: zulip
    pass: zulip

ferretdb:
  name: ferretdb
  user: ferretdb
  pass: ferretdb

skydive:
  bucket: skydive
