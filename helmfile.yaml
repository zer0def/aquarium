{{- $helmTimeout := default 86400 (env "HELM_TIMEOUT") -}}

{{- $namespaces := dict "monitoring" (default "monitoring" (env "NAMESPACES_MONITORING")) "network" (default "network" (env "NAMESPACES_NETWORK")) "serverless" (default "serverless" (env "NAMESPACES_SERVERLESS")) "serverlessFunctions" (default "serverless-fn" (env "NAMESPACES_SERVERLESS_FUNCTIONS")) "serverlessBuild" (default "serverless-bld" (env "NAMESPACES_SERVERLESS_BUILD")) "storage" (default "storage" (env "NAMESPACES_STORAGE")) -}}
{{- $releases := dict "certManager" (default "cert-manager" (env "RELEASES_CERT_MANAGER")) "harbor" (default "harbor" (env "RELEASES_HARBOR")) "ingressController" (default "nginx-ingress" (env "RELEASES_INGRESS_CONTROLLER")) "istio" (dict "old" (default "istio" (env "RELEASES_ISTIO")) "init" (default "istio-init" (env "RELEASES_ISTIO_INIT")) "base" (default "istio-base" (env "RELEASES_ISTIO_BASE")) "control" (default "istio-control" (env "RELEASES_ISTIO_CONTROL")) "gateway" (dict "egress" (default "istio-egress" (env "RELEASES_ISTIO_GATEWAY_EGRESS")) "ingress" (default "istio-ingress" (env "RELEASES_ISTIO_GATEWAY_INGRESS"))) "policy" (default "istio-policy" (env "RELEASES_ISTIO_POLICY")) "telemetry" (dict "grafana" (default "istio-grafana" (env "RELEASES_ISTIO_TELEMETRY_GRAFANA")) "kiali" (default "istio-kiali" (env "RELEASES_ISTIO_TELEMETRY_KIALI")) "prometheusOperator" (default "istio-prometheus-operator" (env "RELEASES_ISTIO_TELEMETRY_PROMETHEUS_OPERATOR")) "tracing" (default "istio-tracing" (env "RELEASES_ISTIO_TELEMETRY_TRACING")))) "jaegerOperator" (default "jaeger-operator" (env "RELEASES_JAEGER_OPERATOR")) "kubeless" (default "kubeless" (env "RELEASES_KUBELESS")) "kubePromStack" (default "kube-prometheus-stack" (env "RELEASES_KUBE_PROMETHEUS_STACK")) "minio" (default "minio" (env "RELEASES_MINIO")) "openebs" (default "openebs" (env "RELEASES_OPENEBS")) "patroni" (default "patroni" (env "RELEASES_PATRONI")) "promscale" (default "promscale" (env "RELEASES_PROMSCALE")) "prometheusAdapter" (default "prometheus-adapter" (env "RELEASES_PROMETHEUS_ADAPTER")) "redis" (default "redis" (env "RELEASES_REDIS")) "sentry" (default "sentry" (env "RELEASES_SENTRY")) "thanos" (default "thanos" (env "RELEASES_THANOS")) -}}
{{- $versions := dict "certManager" (default "1.1.0" (env "VERSIONS_CERT_MANAGER")) "harbor" (default "2.2.2" (env "VERSIONS_HARBOR")) "istio" (default "1.9.2" (env "VERSIONS_ISTIO")) "jaeger" (default "1.22.1" (env "VERSIONS_JAEGER")) "openebs" (default "2.9.0" (env "VERSIONS_OPENEBS")) "openebsNdm" (default "1.3.0" (env "VERSIONS_OPENEBS_NDM")) "prometheusAdapter" (default "0.8.4" (env "VERSIONS_PROMETHEUS_ADAPTER")) "sentry" (default "21.5.1" (env "VERSIONS_SENTRY")) "thanos" (default "0.20.2" (env "VERSIONS_THANOS")) -}}

{{- $harbor := dict "adminPassword" (default "Harbor12345" (env "HARBOR_ADMIN_PASSWORD")) "coreHostname" (default "core.harbor.domain" (env "HARBOR_CORE_HOSTNAME")) "httpNodePort" (default "30002" (env "HARBOR_HTTP_NODEPORT")) "chartVersion" (default "1.6.2" (env "CHART_VERSIONS_HARBOR")) "db" (dict "core" (dict "name" (default "harbor_core" (env "HARBOR_DB_CORE_NAME")) "user" (default "harbor_core" (env "HARBOR_DB_CORE_USER")) "pass" (default "harbor_core" (env "HARBOR_DB_CORE_PASS"))) "notaryServer" (dict "name" (default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_NAME")) "user" (default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_USER")) "pass" (default "harbor_notary_server" (env "HARBOR_DB_NOTARY_SERVER_PASS"))) "notarySigner" (dict "name" (default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_NAME")) "user" (default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_USER")) "pass" (default "harbor_notary_signer" (env "HARBOR_DB_NOTARY_SIGNER_PASS")))) -}}

{{- $istioManifestBase := "./charts/istio/manifests" -}}

{{- $k8sRuntime := default "k3d" (env "K8S_RUNTIME") -}}

{{- $kong := dict "db" (dict "user" (default "kong" (env "KONG_DB_USER")) "pass" (default "kong" (env "KONG_DB_PASS")) "name" (default "kong" (env "KONG_DB_NAME"))) }}
{{- $kubePromStackChartVersion := "9.4.10" -}}

{{- $minio := dict "accessKey" (default "AKIAIOSFODNN7EXAMPLE" (env "MINIO_ACCESS_KEY")) "secretKey" (default "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY" (env "MINIO_SECRET_KEY")) "servicePort" (default 9000 (env "MINIO_SVC_PORT")) "defaultBucket" (default "minio-bucket" (env "MINIO_DEFAULT_BUCKET")) "chartVersion" (default "8.0.0" (env "MINIO_VERSION")) -}}

{{- $openebsOmitLoopDevs := default "" (env "OPENEBS_OMIT_LOOPDEVS") -}}
{{- if $openebsOmitLoopDevs -}}
  {{- $openebsOmitLoopDevs = printf ",%s" $openebsOmitLoopDevs -}}
{{- end -}}

{{- $patroni := dict "replicas" 1 "bouncers" 1 "image" "docker.io/zer0def/spilo" "tag" "13-2.0p7-tsl2.2.1-citus" }}
{{- $patroniHashedName := printf "%s-%s" $releases.patroni (printf "%s:%s" $patroni.image $patroni.tag | sha256sum | trunc 8) }}

{{- $redis := dict "password" (default "redis" (env "REDIS_PASSWORD")) "ports" (dict "readwrite" (default "6379" (env "REDIS_PORT")) "readonly" (default "6380" (env "REDIS_PORT_READONLY")) "sentinel" (default "26379" (env "REDIS_PORT_SENTINEL"))) "replicas" (dict "redis" (int (default "3" (env "REDIS_REPLICAS"))) "haproxy" (int (default "1" (env "REDIS_HAPROXY_REPLICAS")))) -}}

{{- $sentry := dict "admin" (dict "user" "admin@sentry.local" "password" "sentry") "db" (dict "name" "sentry" "user" "sentry" "pass" "sentry") -}}

{{- $thanosObjstoreConfig := dict "secret" (default "thanos-objstore-config" (env "THANOS_OBJSTORE_CONFIG_SECRET")) "filename" (default "object-store.yaml" (env "THANOS_OBJSTORE_CONFIG_FILENAME")) -}}
{{- $thanosSidecarMTLSSecret := default "thanos-sidecar-mtls" (env "THANOS_SIDECAR_MTLS_SECRET") -}}

{{- $timescale := dict "db" (dict "user" (default "timescale" (env "TIMESCALE_DB_USER")) "pass" (default "timescale" (env "TIMESCALE_DB_PASS")) "name" (default "timescale" (env "TIMESCALE_DB_NAME"))) }}

{{- $enables := dict }}
{{- range $i := list "monitoring" "network" "serverless" "storage" "minio" "openebs" }}
  {{- $_ := set $enables $i (not (empty (env (printf "ENABLE_%s" (upper $i))))) }}
{{- end }}

repositories:
- name: stable
  url: "https://charts.helm.sh/stable"
- name: incubator
  url: "https://charts.helm.sh/incubator"
- name: jetstack  # cert-manager
  url: "https://charts.jetstack.io"
- name: banzaicloud  # thanos, src: https://github.com/banzaicloud/banzai-charts
  url: "https://kubernetes-charts.banzaicloud.com"
- name: rancher
  url: "https://releases.rancher.com/server-charts/latest"
- name: sentry  # https://github.com/sentry-kubernetes/charts
  url: "https://sentry-kubernetes.github.io/charts"

## storage
- name: openebs  # https://github.com/openebs/charts
  url: "https://openebs.github.io/charts"
- name: rook
  url: "https://charts.rook.io/release"
- name: minio  # https://github.com/minio/charts
  url: "https://helm.min.io"

## datastores
- name: grafana  # https://github.com/grafana/helm-charts
  url: "https://grafana.github.io/helm-charts"
- name: grafana-loki  # https://github.com/grafana/loki/tree/master/production/helm
  url: "https://grafana.github.io/loki/charts"
- name: prometheus-community  # https://github.com/prometheus-community/helm-charts
  url: "https://prometheus-community.github.io/helm-charts"
- name: dandy-developer  # https://github.com/DandyDeveloper/charts
  url: "https://dandydeveloper.github.io/charts"
- name: harbor  # https://github.com/goharbor/harbor-helm
  url: "https://helm.goharbor.io"
- name: yugabyte
  url: "https://charts.yugabyte.com"
## more partially-proprietarily licensed shit, tarp inside
# - https://github.com/timescale/promscale/tree/master/helm-chart
# - https://github.com/timescale/timescaledb-kubernetes
# - https://github.com/timescale/tobs
- name: timescale
  url: "https://charts.timescale.com"
## LOL SSPL-LICENSED SOFTWARE, DO NOT TOUCH
#- name: elastic  # https://github.com/elastic/helm-charts
#  url: "https://helm.elastic.co"

## networking / service meshes
{{- if semverCompare "<1.6" $versions.istio }}
- name: istio
  url: "https://storage.googleapis.com/istio-release/releases/{{ $versions.istio }}/charts"
{{- end }}
- name: jaegertracing  # src: https://github.com/jaegertracing/helm-charts
  url: "https://jaegertracing.github.io/helm-charts"
#- name: kiali  # https://github.com/kiali/helm-charts
#  url: "https://kiali.org/helm-charts"

## ingresses
# ref: https://github.com/nginxinc/kubernetes-ingress/blob/master/docs/nginx-ingress-controllers.md#differences-between-nginxinckubernetes-ingress-and-kubernetesingress-nginx-ingress-controllers
- name: nginx  # src: https://github.com/nginxinc/kubernetes-ingress/tree/master/deployments/helm-chart
  url: "https://helm.nginx.com/stable"
# ref: https://kubernetes.github.io/ingress-nginx/user-guide/
- name: kubernetes-nginx  # src: https://github.com/kubernetes/ingress-nginx/tree/master/charts/ingress-nginx
  url: https://kubernetes.github.io/ingress-nginx
- name: kong
  url: https://charts.konghq.com

## serverless
- name: openfaas  # https://github.com/openfaas/faas-netes/tree/master/chart
  url: "https://openfaas.github.io/faas-netes"
# https://github.com/fnproject/fn ?

helmDefaults:
  wait: true
  timeout: {{ $helmTimeout }}
  tillerless: false
  #skipDeps: true
  #createNamespace: true
  #cleanupOnFail: true

#bases: {}
#helmFiles:
#- path: postgres-operator-helmfile.yaml
#- path: rancher-helmfile.yaml

templates:
  istio:
    values:
    - global: &istioGlobal
        hub: docker.io/istio
        tag: {{ $versions.istio }}
        istioNamespace: {{ $namespaces.network }}
        telemetryNamespace: {{ $namespaces.network }}
        prometheusNamespace: {{ $namespaces.network }}
        policyNamespace: {{ $namespaces.network }}
        configRootNamespace: {{ $namespaces.network }}
{{- if semverCompare "<1.9" $versions.istio }}
        meshExpansion:
          enabled: true
{{- end }}
      control: &istioControl
        disablePolicyChecks: false
        mtls:
          enabled: true
        outboundTrafficPolicy:
          mode: ALLOW_ANY
        proxy:
          accessLogFile: /dev/stdout
        sds:
          enabled: true
          udsPath: "unix:/var/run/sds/uds_path"
      gateways:
        istio-ingressgateway: &istioIngress
          type: NodePort
        istio-egressgateway: &istioEgress
          type: NodePort
    - &istioOldCertManager
      certmanager:
        enabled: true
    - &istioKiali
      kiali:
        enabled: true
        createDemoSecret: true
        dashboard:
          grafanaURL: "http://grafana.{{ $namespaces.network }}.svc:3000"
          jaegerURL: "http://{{ $releases.jaegerOperator }}-jaeger-query.{{ $namespaces.network }}.svc:16686"
    - &istioMixer
      mixer:
        # istio-policy
        policy:
          enabled: true
        # istio-telemetry/mixer-telemetry
        adapters:
          stdio:
            enabled: true
        telemetry:
          enabled: true
  harbor:
    values:
    - component: &harborVersion
        image:
          tag: v{{ $versions.harbor }}
  openebs:
    values:
    - disabledComponent: &openebsLVP
        enabled: false
        replicas: 0
      openebsTag: &openebsTag
        imageTag: {{ $versions.openebs }}
      openebsNdmTag: &openebsNdmTag
        imageTag: {{ $versions.openebsNdm }}

releases:
{{- if ne $k8sRuntime "k3d" }}
- name: {{ $releases.ingressController }}
  namespace: {{ $namespaces.network }}
  chart: nginx/nginx-ingress
  #chart: kubernetes-nginx/ingress-nginx
  labels:
    purpose: ingress
  values:
  - controller:
      hostNetwork: false
      kind: daemonset
      service:
        type: NodePort
      enableCustomResources: false
      setAsDefaultIngress: true
{{- end }}
- name: {{ $releases.certManager }}
  namespace: {{ $namespaces.network }}
  chart: jetstack/cert-manager
  version: v{{ $versions.certManager }}
  values:
  - installCRDs: true
  hooks:
  - events: ["postsync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
{{- range $ns := values $namespaces }}
      kubectl get ns {{ $ns }} || kubectl create ns {{ $ns }}
{{- end }}
      kubectl apply -f- <<EOF
      apiVersion: cert-manager.io/v1
      kind: ClusterIssuer
      metadata:
        name: selfsigned
        namespace: kube-system
      spec:
        selfSigned: {}
{{- range $ns := values $namespaces }}
      ---
      apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: selfsigned-ca-tls
        namespace: {{ $ns }}
      spec:
        secretName: selfsigned-ca-tls
        isCA: true
        commonName: "{{ $ns }}.svc.cluster.local"
        dnsNames: ["{{ $ns }}.svc.cluster.local"]
        issuerRef:
          name: selfsigned
          kind: ClusterIssuer
      ---
      apiVersion: cert-manager.io/v1
      kind: Issuer
      metadata:
        name: selfsigned-ca
        namespace: {{ $ns }}
      spec:
        ca:
          secretName: selfsigned-ca-tls
{{- end }}
      EOF

# network components
- name: {{ $releases.jaegerOperator }}
  namespace: {{ $namespaces.network }}
  chart: jaegertracing/jaeger-operator
  installed: {{ $enables.network }}
  version: 2.18.0
  values:
  - fullnameOverride: {{ $releases.jaegerOperator | quote }}
    image:
      tag: {{ $versions.jaeger }}
    jaeger:
      create: true
      spec:  # https://www.jaegertracing.io/docs/1.16/operator/
        strategy: allInOne
        ingress:
          enabled: false
    # https://github.com/jaegertracing/jaeger-operator/issues/791
    rbac:
      clusterRole: true
{{- if semverCompare "<1.6" $versions.istio }}
- name: {{ $releases.istio.init }}
  namespace: {{ $namespaces.network }}
  chart: istio/istio-init
  installed: {{ $enables.network }}
  values:
  - *istioOldCertManager
- name: {{ $releases.istio.old }}
  namespace: {{ $namespaces.network }}
  chart: istio/istio
  installed: {{ $enables.network }}
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.init }}
  - {{ $namespaces.network }}/{{ $releases.jaegerOperator }}
  {{- if $enables.network }}
  hooks:
  - events: ["presync"]
    command: "/bin/sh"
    args: ["-xec", "kubectl -n {{ $namespaces.network }} wait --for condition=complete --timeout {{ $helmTimeout }}s job --all"]
  {{- end }}
  values:
  - fullnameOverride: {{ $releases.istio.old | quote }}
    global:
      <<: *istioGlobal
      <<: *istioControl
    <<: *istioOldCertManager
    <<: *istioKiali
    <<: *istioMixer
    gateways:
      istio-ingressgateway:
        <<: *istioIngress
        sds:
          enabled: true
      istio-egressgateway:
        <<: *istioEgress
        enabled: true
    # === removed in 1.6 ===
    nodeagent:  # part of istio-proxy
      enabled: true
      env:
        CA_PROVIDER: Citadel
        CA_ADDR: "istio-citadel.{{ $namespaces.network }}.svc:8060"
        VALID_TOKEN: true
    security:  # citadel is part of istio-pilot
      citadelHealthCheck: true
    sidecarInjectorWebhook:  # part of control plane (istiod)
      enabled: true
{{- else }}
- name: {{ $releases.istio.base }}
  namespace: {{ $namespaces.network }}
  chart: {{ $istioManifestBase }}/charts/base
  installed: {{ $enables.network }}
  values:
  {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
  {{- end }}
  - global:
      <<: *istioGlobal
    #base:  # helm2
    #  enableCRDTemplates: true
- name: {{ $releases.istio.control }}
  namespace: {{ $namespaces.network }}
  chart: {{ $istioManifestBase }}/charts/istio-control/istio-discovery
  installed: {{ $enables.network }}
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.base }}
  values:
  {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
  {{- end }}
  - global:
      <<: *istioGlobal
      <<: *istioControl
    meshConfig:
      rootNamespace: {{ $namespaces.network }}
- name: {{ $releases.istio.gateway.egress }}
  namespace: {{ $namespaces.network }}
  chart: {{ $istioManifestBase }}/charts/gateways/istio-egress
  installed: {{ $enables.network }}
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  values:
  {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
  {{- end }}
  - global:
      <<: *istioGlobal
    gateways:
      istio-egressgateway:
        <<: *istioEgress
- name: {{ $releases.istio.gateway.ingress }}
  namespace: {{ $namespaces.network }}
  chart: {{ $istioManifestBase }}/charts/gateways/istio-ingress
  installed: {{ $enables.network }}
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  values:
  {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
  {{- end }}
  - global:
      <<: *istioGlobal
    gateways:
      istio-ingressgateway:
        <<: *istioIngress
  {{- if semverCompare "<1.8" $versions.istio }}
- name: {{ $releases.istio.policy }}
  namespace: {{ $namespaces.network }}
  chart: {{ $istioManifestBase }}/charts/istio-policy
  installed: {{ $enables.network }}
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  values:
    {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
    {{- end }}
  - global:
      <<: *istioGlobal
    <<: *istioMixer
  {{- end }}
- name: {{ $releases.istio.telemetry.grafana }}
  namespace: {{ $namespaces.network }}
  installed: {{ $enables.network }}
  {{- if semverCompare "<1.8" $versions.istio }}
  chart: {{ $istioManifestBase }}/charts/istio-telemetry/grafana
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  values:
    {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
    {{- end }}
  - global:
      <<: *istioGlobal
  {{- else }}
  chart: grafana/grafana
  version: 5.8.16
  values:
  - {{ $istioManifestBase }}/addons/values-grafana.yaml
    {{- if $enables.network }}
  hooks:
  - events: ["presync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      kubectl get ns {{ $namespaces.network }} || kubectl create ns {{ $namespaces.network }}
      kubectl create configmap -n {{ $namespaces.network }} istio-grafana-dashboards \
        --from-file=pilot-dashboard.json="{{ $istioManifestBase }}/addons/dashboards/pilot-dashboard.json" \
        --from-file=istio-performance-dashboard.json="{{ $istioManifestBase }}/addons/dashboards/istio-performance-dashboard.json"
      kubectl create configmap -n {{ $namespaces.network }} istio-services-grafana-dashboards \
        --from-file=istio-workload-dashboard.json="{{ $istioManifestBase }}/addons/dashboards/istio-workload-dashboard.json" \
        --from-file=istio-service-dashboard.json="{{ $istioManifestBase }}/addons/dashboards/istio-service-dashboard.json" \
        --from-file=istio-mesh-dashboard.json="{{ $istioManifestBase }}/addons/dashboards/istio-mesh-dashboard.json"
    {{- end }}
  {{- end }}
- name: {{ $releases.istio.telemetry.kiali }}
  namespace: {{ $namespaces.network }}
  installed: {{ $enables.network }}
  {{- if semverCompare "<1.8" $versions.istio }}
  chart: {{ $istioManifestBase }}/charts/istio-telemetry/kiali
  needs:
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  values:
    {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
    {{- end }}
  - global:
      <<: *istioGlobal
    <<: *istioKiali
  {{- else }}
  chart: ./charts/kiali-server-1.34.1
  values:
  - {{ $istioManifestBase }}/addons/values-kiali.yaml
  {{- end }}
{{- end }}
# https://github.com/coreos/prometheus-operator/issues/2502
# https://github.com/istio/installer/pull/71
- name: {{ $releases.istio.telemetry.prometheusOperator }}
  namespace: {{ $namespaces.network }}
  installed: {{ and $enables.network $enables.monitoring }}
{{- if semverCompare "<1.8" $versions.istio }}
  chart: {{ $istioManifestBase }}/charts/istio-telemetry/prometheusOperator
  needs:
  - {{ $namespaces.monitoring }}/{{ $releases.kubePromStack }}
  {{- if semverCompare "<1.6" $versions.istio }}
  - {{ $namespaces.network }}/{{ $releases.istio.old }}
  {{- else }}
  - {{ $namespaces.network }}/{{ $releases.istio.control }}
  {{- end }}
  values:
  {{- if semverCompare "<1.9" $versions.istio }}
  - {{ $istioManifestBase }}/charts/global.yaml
  {{- end }}
  - global:
      <<: *istioGlobal
{{- else }}
  chart: prometheus-community/prometheus
  version: 11.16.9
  values:
  - {{ $istioManifestBase }}/addons/values-prometheus.yaml
{{- end }}

## storage components
{{- if ne $k8sRuntime "k3d" }}
- name: {{ $releases.openebs }}
  namespace: {{ $namespaces.storage }}
  chart: openebs/openebs
  installed: {{ $enables.storage }}
  values:  # ref: https://openebs.github.io/charts/openebs-lite-helm-values.yaml
  - fullnameOverride: {{ $releases.openebs | quote }}
    #image:  # hopefully a temporary state of affairs
    #  repository: docker.io/
    analytics:
      enabled: false
    release:
      version: {{ $versions.openebs }}
    apiserver:  # not needed for just local PV
      <<: *openebsLVP
      <<: *openebsTag
    provisioner:  # not needed for just local PV
      <<: *openebsLVP
      <<: *openebsTag
    localprovisioner:
      enabled: true
      replicas: 3
      <<: *openebsTag
    snapshotOperator:  # not needed for just local PV
      <<: *openebsLVP
      controller:
        <<: *openebsTag
      provisioner:
        <<: *openebsTag
    webhook:  # not needed for just local PV
      <<: *openebsLVP
      <<: *openebsTag
    jiva:
      <<: *openebsTag
    cstor:
      pool:
        <<: *openebsTag
      poolMgmt:
        <<: *openebsTag
      target:
        <<: *openebsTag
      volumeMgmt:
        <<: *openebsTag
    helper:
      <<: *openebsTag
    policies:
      monitoring:
        <<: *openebsTag
    ndmOperator:
      enabled: false
      <<: *openebsNdmTag
    ndm:
      enabled: false
      <<: *openebsNdmTag
      filters:
        {{/* excludePaths: "/dev/sd,/dev/vd,fd0,sr0,/dev/ram,/dev/dm-,/dev/md,/dev/zram{{ $openebsOmitLoopDevs }}" */}}
        includePaths: "/dev/loop"
{{- if $enables.storage }}
  hooks:
  - events: ["postsync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      for i in $(kubectl get sc -o jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}'); do
        kubectl annotate sc ${i} storageclass.kubernetes.io/is-default-class-
      done
      kubectl apply -f- <<EOF
      apiVersion: storage.k8s.io/v1
      kind: StorageClass
      provisioner: openebs.io/local
      volumeBindingMode: WaitForFirstConsumer
      reclaimPolicy: Delete
      metadata:
        name: openebs-hostpath
        annotations:
          storageclass.kubernetes.io/is-default-class: "true"
          openebs.io/cas-type: local
          cas.openebs.io/config: |
            #hostpath type will create a PV by
            # creating a sub-directory under the
            # BASEPATH provided below.
            - name: StorageType
              value: "hostpath"
            #Specify the location (directory) where
            # where PV(volume) data will be saved.
            # A sub-directory with pv-name will be
            # created. When the volume is deleted,
            # the PV sub-directory will be deleted.
            #Default value is /var/openebs/local
            - name: BasePath
              value: "/var/openebs/local/"
      #---
      #apiVersion: storage.k8s.io/v1
      #kind: StorageClass
      #provisioner: openebs.io/local
      #volumeBindingMode: WaitForFirstConsumer
      #reclaimPolicy: Delete
      #metadata:
      #  name: openebs-device
      #  annotations:
      #    openebs.io/cas-type: local
      #    cas.openebs.io/config: |
      #      #device type will create a PV by
      #      # issuing a BDC and will extract the path
      #      # values from the associated BD.
      #      - name: StorageType
      #        value: "device"
      EOF
{{- end }}
{{- end }}
- name: {{ $releases.minio }}
  namespace: {{ $namespaces.storage }}
  chart: minio/minio
  version: {{ $minio.chartVersion }}
  installed: {{ and $enables.storage $enables.minio }}
{{- if ne $k8sRuntime "k3d" }}
  needs:
  - {{ $namespaces.storage }}/{{ $releases.openebs }}
{{- end }}
  values:
  - fullnameOverride: {{ $releases.minio | quote }}
    accessKey: {{ $minio.accessKey | quote }}
    secretKey: {{ $minio.secretKey | quote }}
    service:
      port: {{ $minio.servicePort }}
      clusterIP: None
    persistence:  # parameterize based on presence of OpenEBS
      enabled: false
    defaultBucket:
      name: {{ $minio.defaultBucket | quote }}
      enabled: true
    resources:
      requests:
        memory: 256Mi
{{- if and $enables.storage $enables.minio }}
  hooks:
  - events: ["postsync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      MC_NAME="mc-${RANDOM}"
      kubectl -n {{ $namespaces.storage }} apply -f- <<EOF
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: ${MC_NAME}
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: ${MC_NAME}
        template:
          metadata:
            labels:
              app: ${MC_NAME}
          spec:
            containers:
            - name: mc
              image: minio/mc
              command: ['/bin/sh', '-c', 'while true; do sleep 86400; done']
      EOF
      until kubectl -n {{ $namespaces.storage }} wait --for condition=available deploy ${MC_NAME}; do sleep 1; done 2>/dev/null
      kubectl -n {{ $namespaces.storage }} exec $(kubectl -n {{ $namespaces.storage }} get pods -o jsonpath="{.items[?(@.metadata.labels.app==\"${MC_NAME}\")].metadata.name}" | awk '{print $1}') -- /bin/sh -xc "mc config host add minio http://{{ $releases.minio }}.{{ $namespaces.storage }}.svc:{{ $minio.servicePort }} {{ $minio.accessKey }} {{ $minio.secretKey }}"
      echo "MinIO is available under http://{{ $releases.minio }}.{{ $namespaces.storage }}.svc:{{ $minio.servicePort }} with access key \"{{ $minio.accessKey }}\", secret key \"{{ $minio.secretKey }}\" and default bucket \"{{ $minio.defaultBucket }}\"."
{{- end }}

# https://github.com/zalando/spilo
# https://github.com/timescale/timescaledb-docker-ha
- name: {{ $releases.patroni }}
  namespace: {{ $namespaces.storage }}
  chart: ./charts/zer0def/incubator/patroni
  installed: {{ $enables.storage }}
  needs:
{{- if ne $k8sRuntime "k3d" }}
  - {{ $namespaces.storage }}/{{ $releases.openebs }}
{{- end }}
  - {{ $namespaces.network }}/{{ $releases.certManager }}
  values:
  - fullnameOverride: {{ $releases.patroni | quote }}
    replicaCount: {{ $patroni.replicas }}
    image:
      #repository: registry.opensource.zalan.do/acid/spilo-10
      #tag: 1.5-p5
      #repository: registry.opensource.zalan.do/acid/spilo-11
      #tag: 1.6-p1
      #repository: registry.opensource.zalan.do/acid/spilo-12
      #tag: 1.6-p5
      #image: timescale/timescaledb-ha
      #tag: pg12-latest
      #image: registry.opensource.zalan.do/acid/spilo-13
      #tag: 2.0-p7
      #image: timescale/timescaledb
      #tag: latest-pg13
      repository: {{ $patroni.image }}
      tag: {{ $patroni.tag }}
    pgbouncer:
      replicaCount: {{ $patroni.bouncers }}
      tls:
        server:
          issuerRef:
            name: selfsigned-ca
            kind: Issuer
          sslmode: verify-full
        client:
          issuerRef:
            name: selfsigned-ca
            kind: Issuer
    tls:
      issuerRef:
        name: selfsigned-ca
        kind: Issuer
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            topologyKey: "kubernetes.io/hostname"
            namespaceSelector: {}
            labelSelector:
              matchLabels:
                release: {{ $patroniHashedName }}
    env:
      ALLOW_NOSSL: "true"
    spiloConfiguration:
      bootstrap:
        dcs:
          synchronous_mode: true
          #synchronous_mode_strict: true
          synchronous_node_count: {{ sub $patroni.replicas 1 }}
        initdb:
        - data-checksums
        - locale: en_US.UTF-8
        - encoding: UTF-8
      postgresql:
        use_slots: true
        remove_data_directory_on_diverged_timelines: true
        #use_pg_rewind: false
        remove_data_directory_on_rewind_failure: true
        parameters:
          log_destination: stderr
          logging_collector: "off"
          shared_preload_libraries: citus,timescaledb
          timescaledb.license: timescale  # it's a trap!
          timescaledb.telemetry_level: "off"
    metrics:
      postgresql:
        enabled: false
        probes:
          liveness:
            enabled: false
          readiness:
            enabled: false
      patroni:
        enabled: false
        probes:
          liveness:
            enabled: false
          readiness:
            enabled: false
    databases:
    - name: {{ $harbor.db.core.name | quote }}
      user: {{ $harbor.db.core.user | quote }}
      pass: {{ $harbor.db.core.pass | quote }}
    - name: {{ $harbor.db.notaryServer.name | quote }}
      user: {{ $harbor.db.core.user | quote }}
      pass: {{ $harbor.db.core.pass | quote }}
      #user: {{ $harbor.db.notaryServer.user | quote }}
      #pass: {{ $harbor.db.notaryServer.pass | quote }}
    - name: {{ $harbor.db.notarySigner.name | quote }}
      user: {{ $harbor.db.core.user | quote }}
      pass: {{ $harbor.db.core.pass | quote }}
      #user: {{ $harbor.db.notarySigner.user | quote }}
      #pass: {{ $harbor.db.notarySigner.pass | quote }}
    - name: {{ $kong.db.name | quote }}
      user: {{ $kong.db.user | quote }}
      pass: {{ $kong.db.pass | quote }}
    - name: {{ $sentry.db.name | quote }}
      user: {{ $sentry.db.user | quote }}
      pass: {{ $sentry.db.pass | quote }}
    - name: {{ $timescale.db.name | quote }}
      user: {{ $timescale.db.user | quote }}
      pass: {{ $timescale.db.pass | quote }}

- name: {{ $releases.redis }}
  namespace: {{ $namespaces.storage }}
  chart: dandy-developer/redis-ha
  installed: {{ $enables.storage }}
{{- if ne $k8sRuntime "k3d" }}
  needs:
  - {{ $namespaces.storage }}/{{ $releases.openebs }}
{{- end }}
  values:
  - fullnameOverride: {{ $releases.redis | quote }}
    hardAntiAffinity: false
    replicas: {{ $redis.replicas.redis }}
    image:
      tag: 6-alpine
    haproxy:  # required for harbor-jobservice to do proper init, but also generally a decent idea
      enabled: true
      replicas: {{ $redis.replicas.haproxy }}
      stickyBalancing: true
      hardAntiAffinity: false
      readOnly:
        enabled: true
        port: {{ $redis.ports.readonly }}
      metrics:
        enabled: true
    redis:
      port: {{ $redis.ports.readwrite }}
    sentinel:
      port: {{ $redis.ports.sentinel }}
    exporter:
      enabled: true
      tag: v1.12.0-alpine
      extraArgs:  # ??
        ping-on-connect: true
        redis-only-metrics: true
      serviceMonitor:
        enabled: true
    auth: true
    redisPassword: {{ $redis.password }}

- name: {{ $releases.harbor }}
  namespace: {{ $namespaces.storage }}
  chart: harbor/harbor
  version: {{ $harbor.chartVersion }}
  installed: {{ and $enables.storage $enables.minio }}
  #installed: false
  needs:
  - {{ $namespaces.storage }}/{{ $releases.minio }}
  - {{ $namespaces.storage }}/{{ $releases.patroni }}
  - {{ $namespaces.storage }}/{{ $releases.redis }}
  values:
  - nameOverride: {{ $releases.harbor | quote }}
    # default admin username for Harbor is `admin`
    harborAdminPassword: {{ $harbor.adminPassword | quote }}
    externalURL: "https://{{ $harbor.coreHostname }}"
    #externalURL: "https://{{ $releases.harbor }}-{{ $releases.harbor }}-core.{{ $namespaces.storage }}.svc"
    expose:  # by default, service is `ingress`
      tls:
        enabled: true
      #  auto:
      #    commonName: {{ $harbor.coreHostname }}
      #type: nodePort
      #nodePort:
      #  ports:
      #    http:
      #      nodePort: {{ $harbor.httpNodePort }}
      ingress:
        annotations:  # be sure to suffix registry with `:80` when pushing images
          nginx.org/client-max-body-size: "0"
          ingress.kubernetes.io/ssl-redirect: "false"
          nginx.ingress.kubernetes.io/ssl-redirect: "false"
        hosts:
          core: {{ $harbor.coreHostname }}
    persistence:
      imageChartStorage:
        disableredirect: true
        type: s3
        s3:
          accesskey: {{ $minio.accessKey | quote }}
          secretkey: {{ $minio.secretKey | quote }}
          bucket: {{ $minio.defaultBucket | quote }}
          # if using insecure object storage endpoints, you need to prefix it with `http://` protocol for chartmuseum to not barf
          secure: false
          regionendpoint: "http://minio.{{ $namespaces.storage }}.svc:{{ $minio.servicePort }}"
    database:
      type: external
      external:
        host: {{ $releases.patroni }}.{{ $namespaces.storage }}.svc
        username: {{ $harbor.db.core.user | quote }}
        password: {{ $harbor.db.core.pass | quote }}
        coreDatabase: {{ $harbor.db.core.name | quote }}
        notaryServerDatabase: {{ $harbor.db.notaryServer.name | quote }}
        notarySignerDatabase: {{ $harbor.db.notarySigner.name | quote }}
        #sslmode: require
    redis:
      type: external
      external:
        addr: "{{ $releases.redis }}-haproxy.{{ $namespaces.storage }}.svc:{{ $redis.ports.readwrite }}"
        #host: {{ $releases.redis }}-haproxy.{{ $namespaces.storage }}.svc
        password: {{ $redis.password | quote }}
    nginx:
      <<: *harborVersion
    portal:
      <<: *harborVersion
    core:
      <<: *harborVersion
    jobservice:
      <<: *harborVersion
      jobLogger:
      - database
      #- file
      #- stdout
    registry:
      registry:
        <<: *harborVersion
      controller:
        <<: *harborVersion
    chartmuseum:
      <<: *harborVersion
    trivy:
      <<: *harborVersion
    notary:
      server:
        <<: *harborVersion
      signer:
        <<: *harborVersion

- name: {{ $releases.sentry }}
  namespace: {{ $namespaces.storage }}
  chart: sentry/sentry
  installed: {{ $enables.storage }}
  needs:
  - {{ $namespaces.storage }}/patroni
  - {{ $namespaces.storage }}/redis
  values:
  - sentry:
      worker:
        replicas: 1
    images:
      sentry:
        tag: {{ $versions.sentry }}
    postgresql:
      enabled: false
    externalPostgresql:
      host: {{ $releases.patroni }}.{{ $namespaces.storage }}.svc
      username: {{ $sentry.db.user | quote }}
      password: {{ $sentry.db.pass | quote }}
      database: {{ $sentry.db.name | quote }}
    rabbitmq:
      enabled: false
    redis:
      enabled: false
    externalRedis:
      host: {{ $releases.redis }}-haproxy.{{ $namespaces.storage }}.svc
      password: {{ $redis.password | quote }}
    user:
      email: {{ $sentry.admin.user }}
      password: {{ $sentry.admin.password }}

## monitoring
- name: {{ $releases.thanos }}
  namespace: {{ $namespaces.monitoring }}
  chart: banzaicloud/thanos
  installed: {{ and $enables.monitoring $enables.minio }}
  needs:
  - {{ $namespaces.storage }}/{{ $releases.minio }}
  values:
  - fullnameOverride: {{ $releases.thanos | quote }}
    objstoreSecretOverride: {{ $thanosObjstoreConfig.secret | quote }}
    image:
      tag: 'v{{ $versions.thanos }}'
    compact:
      retentionResolutionRaw: 3d
      retentionResolution5m: 16d
      retentionResolution1h: 28d
    objstore:
      type: S3
      config:
        bucket: {{ $minio.defaultBucket | quote }}
        endpoint: "{{ $releases.minio }}.{{ $namespaces.storage }}.svc:{{ $minio.servicePort }}"
        access_key: {{ $minio.accessKey | quote }}
        secret_key: {{ $minio.secretKey | quote }}
        insecure: true
        signature_version2: true
    query:
      replicaLabels:
      - prometheus_replica  # server-scoped
      #- prometheus  # cluster-scoped

# requires non-free timescale-licensed addon to timescaledb.so
- name: {{ $releases.promscale }}
  namespace: {{ $namespaces.storage }}
  chart: timescale/promscale
  installed: {{ and $enables.storage $enables.monitoring }}
  needs:
  - {{ $namespaces.storage }}/{{ $releases.patroni }}
  values:
  - connection:
      password:
        timescaleDBSuperUserKey: password-superuser
        secretTemplate: {{ $releases.patroni | quote }}
      host:
        nameTemplate: '{{ $releases.patroni }}.{{ $namespaces.storage }}.svc'
    service:
      loadBalancer:
        enabled: false

- name: {{ $releases.kubePromStack }}
  namespace: {{ $namespaces.monitoring }}
  chart: prometheus-community/kube-prometheus-stack
  version: {{ $kubePromStackChartVersion }}
  installed: {{ $enables.monitoring }}
  needs:
  - {{ $namespaces.monitoring }}/{{ $releases.thanos }}
  - {{ $namespaces.storage }}/{{ $releases.promscale }}
  values:
  - fullnameOverride: {{ $releases.kubePromStack | quote }}
    prometheus:
      prometheusSpec:
        podMetadata:
          labels:
            prometheus: self
        #serviceMonitorNamespaceSelector: {}
        serviceMonitorSelector:
          matchLabels: {}  # match *ALL* ServiceMonitors on an *empty* set of labels
        #podMonitorNamespaceSelector: {}
        podMonitorSelector:
          matchLabels: {}  # match *ALL* PodMonitors on an *empty* set of labels
        retention: 3h
        remoteRead:
        - url: "http://promscale-connector.{{ .Values.namespaces.storage }}.svc:9201/read"
          readRecent: true
        remoteWrite:
        - url: "http://promscale-connector.{{ .Values.namespaces.storage }}.svc:9201/write"
        secrets:  # mounted under /etc/prometheus/secrets/<secret_name>/<key>
        - {{ $thanosSidecarMTLSSecret }}
        thanos:  # https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#thanosspec
          version: v{{ $versions.thanos }}
          objectStorageConfig:
            key: {{ $thanosObjstoreConfig.filename }}
            name: {{ $thanosObjstoreConfig.secret }}
        #  grpcServerTlsConfig:
        #    caFile: /etc/prometheus/secrets/{{ $thanosSidecarMTLSSecret }}/ca.crt
        #    certFile: /etc/prometheus/secrets/{{ $thanosSidecarMTLSSecret }}/tls.crt
        #    keyFile: /etc/prometheus/secrets/{{ $thanosSidecarMTLSSecret }}/tls.key
        #containers:  # https://github.com/prometheus-operator/prometheus-operator/issues/3322#issuecomment-655369312
        #- name: thanos-sidecar
        #  volumeMounts:
        #  - mountPath: /etc/prometheus/secrets/{{ $thanosSidecarMTLSSecret }}
        #    readOnly: true
        #    name: secret-{{ $thanosSidecarMTLSSecret }}
    grafana:
      sidecar:
        datasources:
          defaultDatasourceEnabled: false
      additionalDataSources:
      - name: Thanos
        type: prometheus
        url: "http://thanos-query-http.{{ $namespaces.monitoring }}.svc:10902/"
        access: proxy
        isDefault: true
# doc: (use autoscaling/v2beta[12] HorizontalPodAutoscaler)
# - ref: https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config.md
# - tut: https://github.com/kubernetes-sigs/prometheus-adapter/blob/master/docs/config-walkthrough.md
- name: {{ $releases.prometheusAdapter }}
  namespace: {{ $namespaces.monitoring }}
  chart: prometheus-community/prometheus-adapter
  installed: {{ $enables.monitoring }}
  needs:
  - {{ $namespaces.monitoring }}/{{ $releases.kubePromStack }}
  values:
  - image:
      repository: directxman12/k8s-prometheus-adapter
      tag: v{{ $versions.prometheusAdapter }}
    prometheus:
      url: "http://{{ $releases.kubePromStack }}-prometheus.{{ $namespaces.monitoring }}.svc"
    rules: {}

## serverless
# doc:
# - https://kubeless.io/docs/
- name: {{ $releases.kubeless }}
  namespace: {{ $namespaces.serverless }}
  # should be installing upstream incubator/kubeless chart, but it's shit
  chart: ./charts/zer0def/incubator/kubeless
  #installed: {{ $enables.serverless }}
  installed: false
  values:
  - nameOverride: {{ $releases.kubeless | quote }}
    rbac:
      create: true
    controller:
      deployment:
        functionController:
          image:
            tag: v1.0.7
        httpTriggerController:
          image:
            tag: v1.0.2
        cronJobTriggerController:
          image:
            tag: v1.0.3
    kafkaTrigger:
      deployment:
        image:
          tag: v1.0.4
    config:
      functionsNamespace: {{ $namespaces.serverlessFunctions }}
    ui:
      enabled: true
      service:
        type: ClusterIP

# doc:
# - https://docs.openfaas.com/
# - https://github.com/openfaas/faas-netes/blob/master/chart/openfaas/README.md
- name: openfaas
  namespace: {{ $namespaces.serverless }}
  chart: openfaas/openfaas
  version: 7.0.4
  installed: {{ $enables.serverless }}
  #installed: false
{{- if $enables.serverless }}
  hooks:
  - events: ["presync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
      kubectl get {{ $namespaces.serverlessFunctions }} || kubectl create ns {{ $namespaces.serverlessFunctions }}
      kubectl annotate ns {{ $namespaces.serverlessFunctions }} openfaas="1"
  - events: ["postsync"]
    command: "/bin/sh"
    args:
    - "-xec"
    - |
  {{- if $enables.network }}
      kubectl label ns {{ $namespaces.serverlessFunctions }} istio-injection=enabled
  {{- end }}
  {{- if $enables.serverless }}
      kubectl apply -f- <<EOF
      kind: Profile
      apiVersion: openfaas.com/v1
      metadata:
        name: runc
        namespace: {{ $namespaces.serverlessFunctions }}
      spec:
        runtimeClassName: runc
      ---
      kind: Profile
      apiVersion: openfaas.com/v1
      metadata:
        name: kata-qemu
        namespace: {{ $namespaces.serverlessFunctions }}
      spec:
        runtimeClassName: kata-qemu
      ---
      kind: Profile
      apiVersion: openfaas.com/v1
      metadata:
        name: kata-fc
        namespace: {{ $namespaces.serverlessFunctions }}
      spec:
        runtimeClassName: kata-fc
      ---
      kind: Profile
      apiVersion: openfaas.com/v1
      metadata:
        name: kata-clh
        namespace: {{ $namespaces.serverlessFunctions }}
      spec:
        runtimeClassName: kata-clh
      EOF
  {{- end }}
{{- end }}
  values:
  - functionNamespace: {{ $namespaces.serverlessFunctions }}
    clusterRole: true
    openfaasPRO: false
    generateBasicAuth: true
    prometheus:
      create: false
    alertmanager:
      create: false
{{- if $enables.network }}
    #basic_auth: true
    #exposeServices: false
    #faasnetes:
    #  httpProbe: false
    #gateway:
    #  directFunctions: true
    #httpProbe: false
    #istio:
    #  mtls: true
{{- end }}

# ref: https://github.com/fission/fission/tree/master/charts
- name: fission
  namespace: {{ $namespaces.serverless }}
  #chart: https://github.com/fission/fission/releases/download/1.11.2/fission-all-1.11.2.tgz
  chart: https://github.com/fission/fission/releases/download/1.11.2/fission-core-1.11.2.tgz
  #installed: {{ $enables.serverless }}
  installed: false
  values:
  - functionNamespace: {{ $namespaces.serverlessFunctions }}
    builderNamespace: {{ $namespaces.serverlessBuild }}

- name: kong
  namespace: {{ $namespaces.network }}
  chart: kong/kong
  installed: false
  needs:
  - {{ $namespaces.storage }}/{{ $releases.patroni }}
  values:
  - env:
      database: postgres
      pg_host: {{ $releases.patroni }}.{{ $namespaces.storage }}.svc
      pg_user: {{ $kong.db.user }}
      pg_password: {{ $kong.db.pass }}
      pg_database: {{ $kong.db.name }}
      #pg_ssl: "on"
      #pg_ssl_verify: "on"
    image:
      tag: alpine
    #ingressController:
    #  installCRDs: false
